@model IEnumerable<DemoProject.Models.MyAdvertiseModel>

@if (TempData["AlertMessage"] != null)
{
    <div class="alert alert-success">
        <strong>Success!</strong>@TempData["AlertMessage"]
        <button type="button" class="close" data-dismiss="alert">
            <span>&times;</span>
        </button>
    </div>
}

@*<div class="container">
    <div class="form-group">
        <div class="input-group">
            <span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span>
            <input type="text" id="SearchItem" placeholder="Search" class="form-control" />
        </div>
    </div>
</div>*@

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.advertiseId)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.productSubCategoryName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.advertiseTitle)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.advertiseDescription)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.advertisePrice)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.areaName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.advertiseStatus)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.UserId)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.advertiseapproved)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.createdOn)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.updatedOn)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.imageData)
        </th>
        <th>Action</th>
    </tr>

    @foreach (var item in Model)
    {
<tr class="SearchItem">
    <td>
        @Html.DisplayFor(modelItem => item.advertiseId)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.productSubCategoryName)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.advertiseTitle)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.advertiseDescription)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.advertisePrice)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.areaName)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.advertiseStatus)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.UserId)
    </td>
    <td>
        @if (!item.advertiseapproved)
        {
            <span>Pending</span>
        }
        else
        {
            @Html.DisplayFor(modelItem => item.advertiseapproved)
        }

    </td>


    <td>
        @Html.DisplayFor(modelItem => item.createdOn)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.updatedOn)
    </td>
    <td>
        @if (item.imageData != null && item.imageData.Length > 0)
        {
            var base64Image = Convert.ToBase64String(item.imageData);
            <img src="data:image/png;base64, @base64Image" alt="Image" style="height:100px; width:100px " />
        }
    </td>
    <td>
        <div style="display: flex; align-items: center; ">
            @Html.ActionLink("Edit", "Edit", "Home", new { id = item.advertiseId }, new { @class = "btn btn-primary" })

            <div style="margin-left: 10px;">
                @Html.ActionLink("View", "Details", "Home", new { advertiseId = item.advertiseId }, new { @class = "btn btn-info" })
            </div>
            <div style="margin-left: 10px;">
                @Html.ActionLink("Delete", "Delete", "Home", new { id = item.advertiseId }, new { @class = "btn btn-danger", onclick = "return confirm('Are you sure you want to delete this record?');" })
            </div>
    </td>
</tr>
    }

    
</table>
<
    @*<style >
    /*.button-group {*/
        display: inline-block;
        margin-right: 10px; /* Adjust the margin as needed */
    }
</style></style>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script>
$(document).ready(function () {

function Contains(text_one, text_two) {
if (text_one.indexOf(text_two) != -1)
return true;
}
$("#SearchItem").keyup(function () {

var searchText = $("#SearchItem").val().toLowerCase();
$(".SearchItem").each(function () {

if (!Contains($(this).text().toLowerCase(), searchText)) {
$(this).hide();
}
else {
$(this).show();
}

});

});

});
</script>*@



using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace DemoProject.Models
{
    public class dataAccess
    {
        private SqlConnection con;
        //To Handle connection related activities    
        private void connection()
        {
            string constr = ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString();
            con = new SqlConnection(constr);

        }
        public IEnumerable<MyAdvertiseModel> GetAllProductList()
        {
            connection();
            List<MyAdvertiseModel> lstadv = new List<MyAdvertiseModel>();
            SqlCommand cmd = new SqlCommand("GetSellerData", con);
            cmd.CommandType = CommandType.StoredProcedure;
            con.Open();
            SqlDataReader rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                MyAdvertiseModel product = new MyAdvertiseModel();

                product.advertiseId = rdr["advertiseId"] != DBNull.Value ? Convert.ToInt32(rdr["advertiseId"]) : 0;
                product.productSubCategoryName = rdr["productSubCategoryName"] != DBNull.Value ? Convert.ToString(rdr["productSubCategoryName"]) : string.Empty;
                product.advertiseTitle = rdr["advertiseTitle"] != DBNull.Value ? rdr["advertiseTitle"].ToString() : string.Empty;
                product.advertiseDescription = rdr["advertiseDescription"] != DBNull.Value ? rdr["advertiseDescription"].ToString() : string.Empty;
                product.advertisePrice = rdr["advertisePrice"] != DBNull.Value ? Convert.ToDecimal(rdr["advertisePrice"]) : 0.0M;
                product.areaName = rdr["areaName"] != DBNull.Value ? Convert.ToString(rdr["areaName"]) : string.Empty;
                product.advertiseStatus = rdr["advertiseStatus"] != DBNull.Value ? Convert.ToBoolean(rdr["advertiseStatus"]) : false;
                product.UserId = rdr["UserId"] != DBNull.Value ? Convert.ToInt32(rdr["UserId"]) : 0; if (rdr["advertiseapproved"] != DBNull.Value)
                {
                    bool isApproved;
                    if (bool.TryParse(rdr["advertiseapproved"].ToString(), out isApproved))
                    {
                        product.advertiseapproved = isApproved;
                    }
                    else
                    {
                        // Handle the case where the value is not a valid Boolean
                        // For example, set it to false or handle an error.
                        product.advertiseapproved = false;
                    }
                }
                else
                {
                    product.advertiseapproved = false; // Default value when DBNull
                }

                product.createdOn = rdr["createdOn"] != DBNull.Value ? Convert.ToDateTime(rdr["createdOn"]) : DateTime.MinValue;
                product.updatedOn = rdr["updatedOn"] != DBNull.Value ? Convert.ToDateTime(rdr["updatedOn"]) : DateTime.MinValue;
                //product.imageData = (byte[])(rdr["imageData"]);
                lstadv.Add(product);
            }
            con.Close();
            return lstadv;
        }

        public bool UpdateAdvertisement(MyAdvertiseModel advertisement)
        {
            connection();
                SqlCommand cmd = new SqlCommand("spUpdatetbl_MyAdvertise", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@advertiseId", advertisement.advertiseId);
                cmd.Parameters.AddWithValue("@productSubCategoryId", advertisement.productSubCategoryId);
                cmd.Parameters.AddWithValue("@advertiseTitle", advertisement.advertiseTitle);
                cmd.Parameters.AddWithValue("@advertiseDescription", advertisement.advertiseDescription);
                cmd.Parameters.AddWithValue("@advertisePrice", advertisement.advertisePrice);
                cmd.Parameters.AddWithValue("@areaId", advertisement.areaId);
                cmd.Parameters.AddWithValue("@advertiseStatus", advertisement.advertiseStatus);
                cmd.Parameters.AddWithValue("@UserId", advertisement.UserId);
                cmd.Parameters.AddWithValue("@advertiseapproved", advertisement.advertiseapproved);
                cmd.Parameters.AddWithValue("@createdOn", advertisement.createdOn);
                cmd.Parameters.AddWithValue("@updatedOn", advertisement.updatedOn);
                //cmd.Parameters.AddWithValue("@imageData", advertisement.imageData);
                // Add other parameters as needed

                con.Open();
                int rowsAffected = cmd.ExecuteNonQuery();
                con.Close();

                return rowsAffected > 0;
            
        }
        public MyAdvertiseModel GetAdvertiseById(int? advertiseId)
        {
            connection();
            MyAdvertiseModel product = null;

            using (var con = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                con.Open();
                SqlCommand cmd = new SqlCommand("GetAdvertiseDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;

                // Add the parameter to the SqlCommand
                cmd.Parameters.AddWithValue("@advertiseId", advertiseId);

                SqlDataReader rdr = cmd.ExecuteReader();

                if (rdr.Read())
                {
                    product = new MyAdvertiseModel(); // Instantiate the product object

                    product.advertiseId = Convert.ToInt32(rdr["advertiseId"]);
                    product.productSubCategoryName = Convert.ToString(rdr["productSubCategoryName"]);
                    product.advertiseTitle = rdr["advertiseTitle"].ToString();
                    product.advertiseDescription = rdr["advertiseDescription"].ToString();
                    product.advertisePrice = Convert.ToDecimal(rdr["advertisePrice"]);
                    product.areaName = Convert.ToString(rdr["areaName"]);
                    product.firstName = Convert.ToString(rdr["firstName"]);
                    product.createdOn = Convert.ToDateTime(rdr["createdOn"]);
                    product.updatedOn = Convert.ToDateTime(rdr["updatedOn"]);
                    //product.imageData = (byte[])(rdr["imageData"]);
                    // Add other fields as needed
                }

                rdr.Close();
            }

            return product;
        }

        public bool DeleteAdvertise(int? advertiseId)
        {
            connection();
            SqlCommand cmd = new SqlCommand("DeleteAdvertise", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@advertiseId", advertiseId);
            con.Open();
            int rowsAffected = cmd.ExecuteNonQuery();
            con.Close();

            return rowsAffected > 0;
        }
    }
}

using DemoProject.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;

namespace DemoProject.Controllers
{
    public class HomeController : Controller
    {
        dataAccess data = new dataAccess();
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult About()
        {
            ViewBag.Message = "Your application description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
        public ActionResult ProductList(string SearchItem, int? i)
        {

            IEnumerable<MyAdvertiseModel> products = data.GetAllProductList();
            return View(products);
        }
        public ActionResult Details(int? advertiseId)
        {
            if (advertiseId == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            var repo = new dataAccess();
            MyAdvertiseModel advertisement = repo.GetAdvertiseById(advertiseId);

            if (advertisement == null)
            {
                return HttpNotFound();
            }

            return View(advertisement);
        }
        [HttpGet]
        
        public ActionResult Edit(int id)
        {
            var repo = new dataAccess();
            // Retrieve the advertisement you want to edit by its ID
            MyAdvertiseModel advertisement = repo.GetAdvertiseById(id);

            if (advertisement == null)
            {
                return HttpNotFound();
            }

            return View(advertisement);
        }
        [HttpPost]

        public ActionResult Edit(MyAdvertiseModel advertisement)
        {
            if (ModelState.IsValid)
            {
                var repo = new dataAccess();
                bool updated = repo.UpdateAdvertisement(advertisement);

                if (updated)
                {
                    // Redirect to a success page or return a success message
                    return RedirectToAction("Success");
                }
                else
                {
                    // Handle update failure
                    ModelState.AddModelError("", "Failed to update the advertisement.");
                }
            }

            // If ModelState is not valid or update fails, return to the edit page with errors
            return View(advertisement);
        }
        [HttpPost]
        public JsonResult UpdateAdvertiseApprovedStatus(int advertiseId, bool newStatus)
        {
            try
            {
                // Update the advertiseapproved status in the database based on the values of 'advertiseId' and 'newStatus'

                // Return a success status
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                // Handle the exception and return a failure status
                return Json(new { success = false, error = ex.Message });
            }
        }

    }

}

@model DemoProject.Models.MyAdvertiseModel

@{
    ViewBag.Title = "Edit";
}

<h2>Ads</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.advertiseId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.advertiseId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.advertiseId, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.productSubCategoryName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.productSubCategoryName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.productSubCategoryName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.advertiseTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.advertiseTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.advertiseTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.advertiseDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.advertiseDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.advertiseDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.advertisePrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.advertisePrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.advertisePrice, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.areaName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.areaName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.areaName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.advertiseStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.advertiseStatus)
                    @Html.ValidationMessageFor(model => model.advertiseStatus, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.HiddenFor(model => model.advertiseapproved, new { id = "initialAdvertiseApproved" })
            @Html.LabelFor(model => model.advertiseapproved, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.advertiseapproved, new { id = "advertiseapprovedCheckbox", onchange = "updateAdvertiseApproved(this)" })
                    @Html.ValidationMessageFor(model => model.advertiseapproved, "", new { @class = "text-danger" })

                </div>
            </div>
        </div>




        <div class="form-group">
            @Html.LabelFor(model => model.createdOn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.createdOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.createdOn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.updatedOn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.updatedOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.updatedOn, "", new { @class = "text-danger" })
            </div>
        </div>




        <!-- Allow uploading a new image -->
        <div class="form-group">
            @Html.Label("Upload New Image", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="advertiseImage" id="advertiseImage" accept="image/*">
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div id="messageDiv" style="display: none;"></div>
<div>
    @Html.ActionLink("Back to List", "AdsList")
</div>
<script>
    $(document).ready(function () {
        $("#advertiseApprovedCheckbox").change(function () {
            var isChecked = $(this).is(":checked");
            $("#advertiseApprovedStatus").val(isChecked);

            // AJAX Request
            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateAdvertiseApprovedStatus", "Home")",
                data: {
                    advertiseId: @Model.advertiseId,
                    newStatus: isChecked
                },
                success: function (data) {
                    if (data.success) {
                        // Update successful
                        // You can display a success message or perform any other actions.
                    } else {
                        // Handle update failure
                    }
                },
                error: function () {
                    // Handle AJAX error
                }
            });
        });
    });
</script>

